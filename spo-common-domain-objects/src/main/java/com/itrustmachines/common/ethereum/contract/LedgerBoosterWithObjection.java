package com.itrustmachines.common.ethereum.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.4.
 */
@SuppressWarnings("rawtypes")
public class LedgerBoosterWithObjection extends Contract {
    public static final String BINARY = "60c0604052600e60808190526d0ccb8c0b8c0b94d3905414d213d560921b60a0908152620000319160009190620001ef565b503480156200003f57600080fd5b5060405162002d3e38038062002d3e833981810160405260608110156200006557600080fd5b508051602080830151604093840151600180546001600160a01b038087166001600160a01b03199283161783556002805491861691909216179055600355600080805260048085527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec8290558651828152808601808952815190208380528287527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ed556103e842027f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ee556524aa26afa62160d11b818901528751602681830301815260468201808a528151918801919091207f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ef5560868201909852601288527124aa26afa622a223a2a92fa127a7a9aa22a960711b60669091019081529180529093529351929390929091620001de917f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3f09190620001ef565b506006555050600060075562000294565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023257805160ff191683800117855562000262565b8280016001018555821562000262579182015b828111156200026257825182559160200191906001019062000245565b506200027092915062000274565b5090565b6200029191905b808211156200027057600081556001016200027b565b90565b612a9a80620002a46000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063624d3d1211610071578063624d3d121461078657806362e06459146108b65780636b30ad23146108be578063d1e5b9e51461096f578063ddcb538f14610977578063e3bd99501461099d576100b4565b8063019b724a146100b957806317a040781461060a578063211c22be1461062e57806328e8e220146106485780633c5406871461070157806354fd4d5014610709575b600080fd5b6105f660048036036101408110156100d057600080fd5b810190602081018135600160201b8111156100ea57600080fd5b8201836020820111156100fc57600080fd5b803590602001918460018302840111600160201b8311171561011d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561016f57600080fd5b82018360208201111561018157600080fd5b803590602001918460018302840111600160201b831117156101a257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156101f457600080fd5b82018360208201111561020657600080fd5b803590602001918460018302840111600160201b8311171561022757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561027957600080fd5b82018360208201111561028b57600080fd5b803590602001918460208302840111600160201b831117156102ac57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102fb57600080fd5b82018360208201111561030d57600080fd5b803590602001918460208302840111600160201b8311171561032e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561037d57600080fd5b82018360208201111561038f57600080fd5b803590602001918460208302840111600160201b831117156103b057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103ff57600080fd5b82018360208201111561041157600080fd5b803590602001918460208302840111600160201b8311171561043257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561048157600080fd5b82018360208201111561049357600080fd5b803590602001918460208302840111600160201b831117156104b457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561050357600080fd5b82018360208201111561051557600080fd5b803590602001918460208302840111600160201b8311171561053657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561058557600080fd5b82018360208201111561059757600080fd5b803590602001918460208302840111600160201b831117156105b857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506109ba945050505050565b604080519115158252519081900360200190f35b610612610fc6565b604080516001600160a01b039092168252519081900360200190f35b610636610fd5565b60408051918252519081900360200190f35b6106ff6004803603608081101561065e57600080fd5b81359160208101359160408201359190810190608081016060820135600160201b81111561068b57600080fd5b82018360208201111561069d57600080fd5b803590602001918460018302840111600160201b831117156106be57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610fdb945050505050565b005b610636611315565b61071161131b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561074b578181015183820152602001610733565b50505050905090810190601f1680156107785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107a36004803603602081101561079c57600080fd5b50356113a9565b60405180866001600160a01b03166001600160a01b0316815260200185815260200180602001806020018460068111156107d957fe5b60ff168152602001838103835286818151815260200191508051906020019080838360005b838110156108165781810151838201526020016107fe565b50505050905090810190601f1680156108435780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561087657818101518382015260200161085e565b50505050905090810190601f1680156108a35780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b6106366114f8565b6108db600480360360208110156108d457600080fd5b50356114fe565b6040518086815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610930578181015183820152602001610918565b50505050905090810190601f16801561095d5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6106126115cc565b6106ff6004803603602081101561098d57600080fd5b50356001600160a01b03166115db565b6106ff600480360360208110156109b357600080fd5b5035611657565b600060606109c98c8c8c611704565b9050610a97816040516020018082805190602001908083835b60208310610a015780518252601f1990920191602091820191016109e2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120610a598b600081518110610a4c57fe5b6020026020010151611728565b8b600181518110610a6657fe5b60200260200101518c600281518110610a7b57fe5b60209081029190910101516002546001600160a01b0316611732565b610ae8576040805162461bcd60e51b815260206004820152601760248201527f524543454950545f5349474e41545552455f4552524f52000000000000000000604482015290519081900360640190fd5b6000610af4828b6117ba565b600081815260056020526040902060010154909150811415610b5d576040805162461bcd60e51b815260206004820152601b60248201527f524543454950545f4455504c49434154455f4f424a454354494f4e0000000000604482015290519081900360640190fd5b6040805160a081018252338152602081018390529081018e9052606081018d90526080810160019052600082815260056020908152604091829020835181546001600160a01b0319166001600160a01b03909116178155838201516001820155918301518051610bd392600285019201906129ca565b5060608201518051610bef9160038401916020909101906129ca565b50608082015160048201805460ff19166001836006811115610c0d57fe5b0217905550905050610c57610c258a8a8a8a8a6119d5565b610c3586600081518110610a4c57fe5b86600181518110610c4257fe5b602002602001015187600281518110610a7b57fe5b610ca8576040805162461bcd60e51b815260206004820152601b60248201527f4d45524b454c50524f4f465f5349474e41545552455f4552524f520000000000604482015290519081900360640190fd5b610cc889600181518110610cb857fe5b602002602001015160001c611f3a565b6040516020018082805190602001908083835b60208310610cfa5780518252601f199092019160209182019101610cdb565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001208c6040516020018082805190602001908083835b60208310610d685780518252601f199092019160209182019101610d49565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014610ded576040805162461bcd60e51b815260206004820152601560248201527421a622a0a920a721a2afa7a92222a92fa2a92927a960591b604482015290519081900360640190fd5b610e3c888a600081518110610dfe57fe5b602002602001015160001c600460008d600181518110610e1a57fe5b602002602001015160001c815260200190815260200160002060010154611ffb565b610e6f57600081815260056020526040902060040180546002919060ff19166001835b0217905550600092505050610fb8565b8451610e965760008181526005602052604090206004908101805460ff1916600183610e5f565b610ec8610eab8e610ea68b612151565b61216a565b8a600081518110610eb857fe5b602002602001015160001c6123b6565b610eef57600081815260056020526040902060040180546003919060ff1916600183610e5f565b610f1185898b600081518110610f0157fe5b602002602001015160001c6123ba565b610f3857600081815260056020526040902060040180546003919060ff1916600183610e5f565b610f4486868f846124c6565b610f695760008181526005602052604090206004908101805460ff1916600183610e5f565b610f73868e61263d565b610f99576000818152600560208190526040909120600401805460ff1916600183610e5f565b6000908152600560205260409020600401805460ff1916905550600190505b9a9950505050505050505050565b6002546001600160a01b031681565b60065481565b6002546001600160a01b0316331461103a576040805162461bcd60e51b815260206004820152601e60248201527f73706f53657276657257616c6c65744164647265737320696e76616c69640000604482015290519081900360640190fd5b6003548414611090576040805162461bcd60e51b815260206004820152601760248201527f5f636c656172616e63654f7264657220696e76616c6964000000000000000000604482015290519081900360640190fd5b600082116110d8576040805162461bcd60e51b815260206004820152601060248201526f17dd1e10dbdd5b9d081a5b9d985b1a5960821b604482015290519081900360640190fd5b8051611122576040805162461bcd60e51b815260206004820152601460248201527317d9195cd8dc9a5c1d1a5bdb881a5b9d985b1a5960621b604482015290519081900360640190fd5b61112e60075483612787565b6007819055600654101561117e576040805162461bcd60e51b81526020600482015260126024820152711b585e151e10dbdd5b9d081a5b9d985b1a5960721b604482015290519081900360640190fd5b60038054600019810160009081526004602081815260408084206001818101548254928901548451808701929092528185019390935260608082019390935283518082039093018352608081018085528351938601939093206101208201855288845260a082018d81526103e8420260c0840181815260e085018481526101009095018e81529b8b528989529690992085518155905193810193909355935160028301555197810197909755945180519496919594919361124593908501929101906129ca565b509050507f58859c73c7901b793059ede08d0791a182675f86d81dcc63dbae70bebfa2adf0600354868484876040518086815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112c65781810151838201526020016112ae565b50505050905090810190601f1680156112f35780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1505060038054600101905550505050565b60075481565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156113a15780601f10611376576101008083540402835291602001916113a1565b820191906000526020600020905b81548152906001019060200180831161138457829003601f168201915b505050505081565b60056020908152600091825260409182902080546001808301546002808501805488516101009582161595909502600019011691909104601f81018790048702840187019097528683526001600160a01b039093169590949192918301828280156114555780601f1061142a57610100808354040283529160200191611455565b820191906000526020600020905b81548152906001019060200180831161143857829003601f168201915b5050505060038301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156114e55780601f106114ba576101008083540402835291602001916114e5565b820191906000526020600020905b8154815290600101906020018083116114c857829003601f168201915b5050506004909301549192505060ff1685565b60035481565b6004602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115c25780601f10611597576101008083540402835291602001916115c2565b820191906000526020600020905b8154815290600101906020018083116115a557829003601f168201915b5050505050905085565b6001546001600160a01b031681565b6001546001600160a01b03163314611635576040805162461bcd60e51b81526020600482015260186024820152771a5d1b55d85b1b195d1059191c995cdcc81a5b9d985b1a5960421b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146116b1576040805162461bcd60e51b81526020600482015260186024820152771a5d1b55d85b1b195d1059191c995cdcc81a5b9d985b1a5960421b604482015290519081900360640190fd5b6116bd60065482612787565b600681905560075460408051918252602082019290925281517f96697f8280ef45ceeb3b8ce37058b4f2956f5b2ce25f7fbcbaa1d5aebd9eab92929181900390910190a150565b60608061171185856127e1565b905061171d81846127e1565b9150505b9392505050565b60ff81165b919050565b6000816001600160a01b031660018787878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561179b573d6000803e3d6000fd5b505050602060405103516001600160a01b031614905095945050505050565b600060606117db836000815181106117ce57fe5b60200260200101516128d8565b90506002846117f0856001815181106117ce57fe5b611800866002815181106117ce57fe5b8460028651038151811061181057fe5b602001015160f81c60f81b8560018751038151811061182b57fe5b602001015160f81c60f81b6040516020018086805190602001908083835b602083106118685780518252601f199092019160209182019101611849565b51815160209384036101000a600019018019909216911617905288519190930192880191508083835b602083106118b05780518252601f199092019160209182019101611891565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b602083106118f85780518252601f1990920191602091820191016118d9565b51815160209384036101000a60001901801990921691161790526001600160f81b03199687169190930190815293909416600184015260408051808503601d19018152600290940190819052835193975095508594508601925081905083835b602083106119775780518252601f199092019160209182019101611958565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156119b6573d6000803e3d6000fd5b5050506040513d60208110156119cb57600080fd5b5051949350505050565b60006060806119ea88600081518110610cb857fe5b905081816040516020018083805190602001908083835b60208310611a205780518252601f199092019160209182019101611a01565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611a685780518252601f199092019160209182019101611a49565b5181516020939093036101000a6000190180199091169216919091179052601760f91b92019182525060408051808303601e190181526001909201905294506000925050505b60018851038160ff161015611b9a5782611ad0898360ff16815181106117ce57fe5b6040516020018083805190602001908083835b60208310611b025780518252601f199092019160209182019101611ae3565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611b4a5780518252601f199092019160209182019101611b2b565b6001836020036101000a03801982511681845116808217855250505050505090500180601760f91b8152506001019250505060405160208183030381529060405292508080600101915050611aae565b5081611baf8860018a5103815181106117ce57fe5b6040516020018083805190602001908083835b60208310611be15780518252601f199092019160209182019101611bc2565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611c295780518252601f199092019160209182019101611c0a565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150606060008090505b86518160ff161015611e1a5781611ca6611c978a8460ff1681518110611c8a57fe5b6020026020010151612990565b67ffffffffffffffff16611f3a565b611cb8898460ff16815181106117ce57fe5b611cca898560ff16815181106117ce57fe5b6040516020018085805190602001908083835b60208310611cfc5780518252601f199092019160209182019101611cdd565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b60208310611d445780518252601f199092019160209182019101611d25565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b60208310611d8c5780518252601f199092019160209182019101611d6d565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611dd45780518252601f199092019160209182019101611db5565b6001836020036101000a03801982511681845116808217855250505050505090500194505050505060405160208183030381529060405291508080600101915050611c68565b508281611e2d8b600181518110610cb857fe5b6040516020018084805190602001908083835b60208310611e5f5780518252601f199092019160209182019101611e40565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b60208310611ea75780518252601f199092019160209182019101611e88565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611eef5780518252601f199092019160209182019101611ed0565b6001836020036101000a038019825116818451168082178552505050505050905001935050505060405160208183030381529060405280519060200120935050505095945050505050565b606081611f5f57506040805180820190915260018152600360fc1b602082015261172d565b8160005b8115611f7757600101600a82049150611f63565b6060816040519080825280601f01601f191660200182016040528015611fa4576020820181803883390190505b50905060001982015b8515611ff257600a860660300160f81b82828060019003935081518110611fd057fe5b60200101906001600160f81b031916908160001a905350600a86049550611fad565b50949350505050565b6000808381805b60018851038110156121445760028084046001146120235760028404612026565b60005b8161202d57fe5b0681600201019150600288828151811061204357fe5b602002602001015189836001018151811061205a57fe5b602002602001015160405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106120b75780518252601f199092019160209182019101612098565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156120f6573d6000803e3d6000fd5b5050506040513d602081101561210b57600080fd5b5051935060028304925087828151811061212157fe5b6020026020010151841461213c576000945050505050611721565b600201612002565b5050509091149392505050565b600080600283516001018161216257fe5b049392505050565b6000806002846040516020018082805190602001908083835b602083106121a25780518252601f199092019160209182019101612183565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106122055780518252601f1990920191602091820191016121e6565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015612244573d6000803e3d6000fd5b5050506040513d602081101561225957600080fd5b505190506002612268826128d8565b6040516020018082805190602001908083835b6020831061229a5780518252601f19909201916020918201910161227b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106122fd5780518252601f1990920191602091820191016122de565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa15801561233c573d6000803e3d6000fd5b5050506040513d602081101561235157600080fd5b505190506000805b60038160ff161015612395578060080260ff16838260ff166020811061237b57fe5b1a63ffffffff90811690911b169190910190600101612359565b506001600019850181901b60188690039091019190911c0191505092915050565b1490565b60008060028560405160200180828051906020019060200280838360005b838110156123f05781810151838201526020016123d8565b505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106124385780518252601f199092019160209182019101612419565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015612477573d6000803e3d6000fd5b5050506040513d602081101561248c57600080fd5b5051905082600281066124a1575060006124a5565b5060015b8481815181106124b157fe5b60200260200101518214925050509392505050565b6000806002846040516020018082805190602001908083835b602083106124fe5780518252601f1990920191602091820191016124df565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106125615780518252601f199092019160209182019101612542565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156125a0573d6000803e3d6000fd5b5050506040513d60208110156125b557600080fd5b505190506000805b87518160ff1610156125f85782888260ff16815181106125d957fe5b602002602001015114156125f057600191506125f8565b6001016125bd565b600182151514801561261f575084878260ff168151811061261557fe5b6020026020010151145b1561262d5760019150612632565b600091505b509695505050505050565b6000806002836040516020018082805190602001908083835b602083106126755780518252601f199092019160209182019101612656565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106126d85780518252601f1990920191602091820191016126b9565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015612717573d6000803e3d6000fd5b5050506040513d602081101561272c57600080fd5b50519050600080805b86518160ff16101561276e5783878260ff168151811061275157fe5b60200260200101511415612766576001909101905b600101612735565b508060ff1660011415611ff25750600195945050505050565b600082820183811015611721576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6060808390506060839050606081518351016040519080825280601f01601f19166020018201604052801561281d576020820181803883390190505b509050806000805b85518110156128765785818151811061283a57fe5b602001015160f81c60f81b83838060010194508151811061285757fe5b60200101906001600160f81b031916908160001a905350600101612825565b5060005b84518110156128cb5784818151811061288f57fe5b602001015160f81c60f81b8383806001019450815181106128ac57fe5b60200101906001600160f81b031916908160001a90535060010161287a565b5090979650505050505050565b60408051818152606081810183529182919060208201818038833901905050905060005b6020811015612989576008810260020a840261291e601060f883901c04612996565b83836002026000018151811061293057fe5b60200101906001600160f81b031916908160001a905350612957601060f883901c06612996565b83836002026001018151811061296957fe5b60200101906001600160f81b031916908160001a905350506001016128fc565b5092915050565b60c01c90565b6000600a8260ff1610156129b157506030810160f81b61172d565b60108260ff1610156100b457506057810160f81b61172d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a0b57805160ff1916838001178555612a38565b82800160010185558215612a38579182015b82811115612a38578251825591602001919060010190612a1d565b50612a44929150612a48565b5090565b612a6291905b80821115612a445760008155600101612a4e565b9056fea265627a7a723158200b269f2649685b3eaf5df3b0a08666fc052f7ebc79d37ec3fea9d1841d9a826c64736f6c63430005110032";

    public static final String FUNC_ADDMAXTXCOUNT = "addMaxTxCount";

    public static final String FUNC_CHANGESPOSERVERWALLETADDRESS = "changeSpoServerWalletAddress";

    public static final String FUNC_CLEARANCEORDER = "clearanceOrder";

    public static final String FUNC_CLEARANCERECORDS = "clearanceRecords";

    public static final String FUNC_ITMWALLETADDRESS = "itmWalletAddress";

    public static final String FUNC_MAXTXCOUNT = "maxTxCount";

    public static final String FUNC_OBJECTION = "objection";

    public static final String FUNC_OBJECTIONRECORDS = "objectionRecords";

    public static final String FUNC_SPOSERVERWALLETADDRESS = "spoServerWalletAddress";

    public static final String FUNC_TXCOUNT = "txCount";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_WRITECLEARANCERECORD = "writeClearanceRecord";

    public static final Event ADDMAXTXCOUNTEVENT_EVENT = new Event("addMaxTxCountEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WRITECLEARANCERECORDEVENT_EVENT = new Event("writeClearanceRecordEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected LedgerBoosterWithObjection(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LedgerBoosterWithObjection(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LedgerBoosterWithObjection(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LedgerBoosterWithObjection(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddMaxTxCountEventEventResponse> getAddMaxTxCountEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDMAXTXCOUNTEVENT_EVENT, transactionReceipt);
        ArrayList<AddMaxTxCountEventEventResponse> responses = new ArrayList<AddMaxTxCountEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddMaxTxCountEventEventResponse typedResponse = new AddMaxTxCountEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.maxTxCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddMaxTxCountEventEventResponse> addMaxTxCountEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddMaxTxCountEventEventResponse>() {
            @Override
            public AddMaxTxCountEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDMAXTXCOUNTEVENT_EVENT, log);
                AddMaxTxCountEventEventResponse typedResponse = new AddMaxTxCountEventEventResponse();
                typedResponse.log = log;
                typedResponse.txCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.maxTxCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddMaxTxCountEventEventResponse> addMaxTxCountEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDMAXTXCOUNTEVENT_EVENT));
        return addMaxTxCountEventEventFlowable(filter);
    }

    public List<WriteClearanceRecordEventEventResponse> getWriteClearanceRecordEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WRITECLEARANCERECORDEVENT_EVENT, transactionReceipt);
        ArrayList<WriteClearanceRecordEventEventResponse> responses = new ArrayList<WriteClearanceRecordEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WriteClearanceRecordEventEventResponse typedResponse = new WriteClearanceRecordEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.clearanceOrder = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.rootHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.createTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.chainHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.description = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WriteClearanceRecordEventEventResponse> writeClearanceRecordEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WriteClearanceRecordEventEventResponse>() {
            @Override
            public WriteClearanceRecordEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WRITECLEARANCERECORDEVENT_EVENT, log);
                WriteClearanceRecordEventEventResponse typedResponse = new WriteClearanceRecordEventEventResponse();
                typedResponse.log = log;
                typedResponse.clearanceOrder = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.rootHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.createTime = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.chainHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.description = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WriteClearanceRecordEventEventResponse> writeClearanceRecordEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WRITECLEARANCERECORDEVENT_EVENT));
        return writeClearanceRecordEventEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addMaxTxCount(BigInteger _maxTxcount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMAXTXCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_maxTxcount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> changeSpoServerWalletAddress(String _spoServerWalletAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHANGESPOSERVERWALLETADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _spoServerWalletAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> clearanceOrder() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLEARANCEORDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, byte[], BigInteger, byte[], String>> clearanceRecords(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLEARANCERECORDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, byte[], BigInteger, byte[], String>>(function,
                new Callable<Tuple5<BigInteger, byte[], BigInteger, byte[], String>>() {
                    @Override
                    public Tuple5<BigInteger, byte[], BigInteger, byte[], String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, byte[], BigInteger, byte[], String>(
                                (BigInteger) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> itmWalletAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ITMWALLETADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> maxTxCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXTXCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> objection(String indexValue, String co, String secondPart, List<byte[]> receiptSignature, List<byte[]> merkleProofIndexAndClearnaceOrder, List<byte[]> _slice, List<byte[]> _pbPairIndex, List<byte[]> _pbPbpairKey, List<byte[]> _pbpairValue, List<byte[]> merkleProofSignature) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_OBJECTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(indexValue), 
                new org.web3j.abi.datatypes.Utf8String(co), 
                new org.web3j.abi.datatypes.Utf8String(secondPart), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(receiptSignature, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(merkleProofIndexAndClearnaceOrder, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_slice, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes8>(
                        org.web3j.abi.datatypes.generated.Bytes8.class,
                        org.web3j.abi.Utils.typeMap(_pbPairIndex, org.web3j.abi.datatypes.generated.Bytes8.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_pbPbpairKey, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_pbpairValue, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(merkleProofSignature, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, byte[], String, String, BigInteger>> objectionRecords(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OBJECTIONRECORDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple5<String, byte[], String, String, BigInteger>>(function,
                new Callable<Tuple5<String, byte[], String, String, BigInteger>>() {
                    @Override
                    public Tuple5<String, byte[], String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, byte[], String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> spoServerWalletAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SPOSERVERWALLETADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> txCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TXCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> version() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> writeClearanceRecord(BigInteger _clearanceOrder, byte[] _rootHash, BigInteger _txCount, String _description) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WRITECLEARANCERECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_clearanceOrder), 
                new org.web3j.abi.datatypes.generated.Bytes32(_rootHash), 
                new org.web3j.abi.datatypes.generated.Uint256(_txCount), 
                new org.web3j.abi.datatypes.Utf8String(_description)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static LedgerBoosterWithObjection load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LedgerBoosterWithObjection(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LedgerBoosterWithObjection load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LedgerBoosterWithObjection(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LedgerBoosterWithObjection load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LedgerBoosterWithObjection(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LedgerBoosterWithObjection load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LedgerBoosterWithObjection(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LedgerBoosterWithObjection> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _itmWalletAddress, String _spoServerWalletAddress, BigInteger _maxTxCount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _itmWalletAddress), 
                new org.web3j.abi.datatypes.Address(160, _spoServerWalletAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_maxTxCount)));
        return deployRemoteCall(LedgerBoosterWithObjection.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<LedgerBoosterWithObjection> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _itmWalletAddress, String _spoServerWalletAddress, BigInteger _maxTxCount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _itmWalletAddress), 
                new org.web3j.abi.datatypes.Address(160, _spoServerWalletAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_maxTxCount)));
        return deployRemoteCall(LedgerBoosterWithObjection.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LedgerBoosterWithObjection> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _itmWalletAddress, String _spoServerWalletAddress, BigInteger _maxTxCount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _itmWalletAddress), 
                new org.web3j.abi.datatypes.Address(160, _spoServerWalletAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_maxTxCount)));
        return deployRemoteCall(LedgerBoosterWithObjection.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LedgerBoosterWithObjection> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _itmWalletAddress, String _spoServerWalletAddress, BigInteger _maxTxCount) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _itmWalletAddress), 
                new org.web3j.abi.datatypes.Address(160, _spoServerWalletAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_maxTxCount)));
        return deployRemoteCall(LedgerBoosterWithObjection.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class AddMaxTxCountEventEventResponse extends BaseEventResponse {
        public BigInteger txCount;

        public BigInteger maxTxCount;
    }

    public static class WriteClearanceRecordEventEventResponse extends BaseEventResponse {
        public BigInteger clearanceOrder;

        public byte[] rootHash;

        public BigInteger createTime;

        public byte[] chainHash;

        public String description;
    }
}
